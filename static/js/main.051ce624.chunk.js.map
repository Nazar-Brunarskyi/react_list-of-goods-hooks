{"version":3,"sources":["types/SortType.ts","functions/getReorderedGoods.ts","App.tsx","index.tsx"],"names":["SortType","getReorderedGoods","goods","sortType","isReversed","visibleGoods","NONE","sort","itemA","itemB","ALPHABET","localeCompare","length","reverse","goodsFromServer","App","useState","setSortType","setReverse","isResetRendered","className","type","cn","onClick","LENGTH","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAKA,E,sEAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAMUA,Q,OCHR,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAczB,OAZIC,IAAaH,EAASM,MACxBD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAON,IAAaH,EAASU,SACzBF,EAAMG,cAAcF,GACpBD,EAAMI,OAASH,EAAMG,UAIzBR,GACFC,EAAaQ,UAGRR,E,WCdIS,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAAgCC,mBAAShB,EAASM,MAAlD,mBAAOH,EAAP,KAAiBc,EAAjB,KACA,EAAiCD,oBAAS,GAA1C,mBAAOZ,EAAP,KAAmBc,EAAnB,KAEMC,EAAkBf,GAAcD,IAAaH,EAASM,KAmB5D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,CACZ,kBAAkB,EAClB,WAAYnB,IAAaH,EAASU,WAEpCa,QA1B8B,WACpCN,EAAYjB,EAASU,WAmBjB,iCAWA,wBACEW,KAAK,SACLD,UAAWE,IAAG,CACZ,qBAAqB,EACrB,WAAYnB,IAAaH,EAASwB,SAEpCD,QAjCwB,WAC9BN,EAAYjB,EAASwB,SA0BjB,4BAWA,wBACEH,KAAK,SACLD,UAAWE,IAAG,CACZ,qBAAqB,EACrB,YAAalB,IAEfmB,QAxCmB,WACzBL,GAAYd,IAiCR,qBAYGe,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA9Ca,WACvBN,EAAYjB,EAASM,MACrBY,GAAW,IAyCH,sBAYN,6BACE,6BAEIjB,EAAkBa,EAAiB,CAAEX,WAAUC,eAC5CqB,KAAI,SAACC,GAAD,OACH,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cC/FzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.051ce624.chunk.js","sourcesContent":["enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport default SortType;\n","import ReorderOptions from '../types/ReorderOptions';\nimport SortType from '../types/SortType';\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType !== SortType.NONE) {\n    visibleGoods.sort((itemA, itemB) => {\n      return sortType === SortType.ALPHABET\n        ? itemA.localeCompare(itemB)\n        : itemA.length - itemB.length;\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport {};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport SortType from './types/SortType';\nimport { getReorderedGoods } from './functions/getReorderedGoods';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n\n  const isResetRendered = isReversed || sortType !== SortType.NONE;\n\n  const handleClickSortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleClickSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleClickReverse = () => {\n    setReverse(!isReversed);\n  };\n\n  const handleClickReset = () => {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn({\n            'button is-info': true,\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={handleClickSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({\n            'button is-success': true,\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={handleClickSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({\n            'button is-warning': true,\n            'is-light': !isReversed,\n          })}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          (isResetRendered) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleClickReset}\n            >\n              Reset\n            </button>\n          )\n        }\n\n      </div>\n\n      <ul>\n        <ul>\n          {\n            getReorderedGoods(goodsFromServer, { sortType, isReversed })\n              .map((good) => (\n                <li key={good} data-cy=\"Good\">{good}</li>\n              ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}